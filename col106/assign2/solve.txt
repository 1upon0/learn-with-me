void solve(Maze * maze, DequeADT<Point> * dq)
{
	if(!maze)return;
	Point pt[4],p2,p1=maze->getStartPoint(),end=maze->getEndPoint();
	unsigned int d[4],d1;
	dq->push_back(p1);
	while(!dq->empty()){
		d[0]=d[1]=d[2]=d[3]=32767;
		p1=dq->front();
		if(p1.isEqual(end))
			break;
		maze->setVisited(p1);
		dq->pop_front();
		pt[0]=Point(p1.getRow(),p1.getColumn()-1);
		pt[1]=Point(p1.getRow(),p1.getColumn()+1);
		pt[2]=Point(p1.getRow()-1,p1.getColumn());
		pt[3]=Point(p1.getRow()+1,p1.getColumn());
		for(int i=0;i<4;i++){
			if(maze->isInBounds(pt[i])&&!maze->isWall(pt[i])&&!maze->isVisited(pt[i]))
				d[i]=pt[i].distanceFrom(end);
		}
		d1=p1.distanceFrom(end);
		
		for(int i=0;i<4;i++){
			if(d[i]==32767)
				continue;
			if(d[i]>=d1)
				dq->push_back(pt[i]);
		}
		for(int i=3;i>=0;i--){
			if(d[i]==32767)
				continue;
			if(d[i]<d1)
				dq->push_front(pt[i]);
		}
	}
}